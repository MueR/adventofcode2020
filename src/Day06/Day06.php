<?php

namespace MueR\AdventOfCode2020\Day06;

use MueR\AdventOfCode2020\AbstractSolver;

class Day06 extends AbstractSolver
{
    private array $groups = [];

    public function partOne(): int
    {
        $total = 0;
        foreach ($this->groups as $index => $byPerson) {
            $questions = array_fill_keys(range(ord('a'), ord('z')), 0);
            foreach ($byPerson as $answers) {
                foreach ($answers as $letter) {
                    $questions[ord($letter)] = 1;
                }
            }
            $total += array_sum($questions);
        }
        return $total;
    }

    public function partTwo(): int
    {
        $total = 0;
        foreach ($this->groups as $index => $byPerson) {
            $questions = array_fill_keys(range(ord('a'), ord('z')), 0);
            foreach ($byPerson as $answers) {
                foreach ($answers as $letter) {
                    $questions[ord($letter)]++;
                }
            }
            foreach ($questions as $letter => $count) {
                if ($count === count($byPerson)) {
                    $total++;
                }
            }

        }
        return $total;
    }

    protected function readInput(): void
    {
        parent::readInput(); // TODO: Change the autogenerated stub

        $this->groups = array_map(
            fn ($group) => array_map(fn ($person) => array_unique(str_split($person, 1)), explode("\n", $group)),
            explode("\n\n", $this->input)
        );
    }
}
